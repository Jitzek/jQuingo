(self.webpackChunkjquingo=self.webpackChunkjquingo||[]).push([[826],{7661:(t,e,n)=>{"use strict";var r=n(9755),o=n(1036),i=n(6486),s=function(){function t(t){this.value=t,this.rendered=!1}return t.prototype.render=function(t){r(t).append(o(this.value,{allowedTags:[],allowedAttributes:{},selfClosing:[],disallowedTagsMode:"escape"})),this.prev=(0,i.clone)(this)},t.prototype.update=function(e){if(!(this.prev instanceof t))return r(e).contents().replaceWith(""),void this.render(e);this.value!==this.prev.value&&(console.log("hello"),r(e).contents().replaceWith(o(this.value,{allowedTags:[],allowedAttributes:{},selfClosing:[],disallowedTagsMode:"escape"}))),this.prev=(0,i.clone)(this)},t.prototype.remove=function(){this.value=""},t}(),h=function(){function t(t,e){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];this.prev_children=[],this.rendered=!1,this.type=t.toLowerCase(),this.props=e,this.children=n}return t.prototype.render=function(t){var e=this;this.element=document.createElement(this.type),r(this.element).attr(this.props),this.children.forEach((function(t){t.render(e.element)})),r(t).append(this.element),this.rendered=!0,this.children.forEach((function(t){return t.rendered=!0})),this.prev=(0,i.clone)(this)},t.prototype.update=function(e){var n;this.rendered||this.render(e),this.prev instanceof t&&this.type===this.prev.type||(console.info("something's type was changed"),this.reload()),r(this.element).attr(this.props);for(var o=0;o<this.children.length||o<this.prev_children.length;o++)this.children[o]&&this.prev_children[o]&&(this.children[o]instanceof t&&this.prev_children[o]instanceof t&&this.children[o].type!==this.prev_children[o].type||this.children[o]instanceof s&&this.prev_children[o]instanceof s&&this.children[o].value!==this.prev_children[o].value)&&(console.info("node was removed"),this.reload()),null===(n=this.children[o])||void 0===n||n.update(this.element);this.prev=(0,i.clone)(this),this.prev.children=(0,i.clone)(this.children),this.prev_children=(0,i.clone)(this.children)},t.prototype.remove=function(){r(this.element).remove()},t.prototype.reload=function(){var t=document.createElement(this.type);this.children.forEach((function(e){return e.render(t)})),r(this.element).replaceWith(t),this.element=t},t}(),c=function(){function t(){this.nodes=[],this._prev_template="",this.init()}return t.prototype.init=function(){},t.prototype.template=function(){return""},t.prototype.render=function(){var t,e=this.template();if(e!==this._prev_template){for(;this.nodes.length>0;)null===(t=this.nodes.pop())||void 0===t||t.remove();this._prev_template=e}return this.nodes.length<1&&(this.nodes=f.createNode(e,void 0)),this.nodes},t}(),u=function(){function t(t){this._callbacks=new Map,this._value=t}return t.prototype.get=function(){return this._value},t.prototype.set=function(t){this._value=t,this.notify()},t.prototype.update=function(t){t(this._value),this.notify()},t.prototype.subscribe=function(t){var e=this._getAvailableIdentifier();return this._callbacks.set(e,t),t(this._value),e},t.prototype._getAvailableIdentifier=function(t){return void 0===t&&(t=0),this._callbacks.has(t)?this._getAvailableIdentifier(t+1):t},t.prototype.unsubscribe=function(t){this._callbacks.delete(t)},t.prototype.notify=function(){var t=this;this._callbacks.forEach((function(e){e(t._value)}))},t}(),l=new(function(){function t(){this.routes=[],this.current_route=new u(this.routes[0])}return t.prototype.pathExists=function(t){return void 0!==this.routes.find((function(e){return e.path===t}))},t.prototype.routeTo=function(t){history.pushState(null,"",t);var e=window.location.pathname;return this.setRoute(e)},t.prototype.addRoute=function(t){return!this.pathExists(t.path)&&(this.routes.push(t),!0)},t.prototype.removeRoute=function(t){return!!this.pathExists(t)&&(this.routes.splice(this.routes.indexOf(this.routes.find((function(e){return e.path===t}))),1),!0)},t.prototype.setRoute=function(t){return!!this.pathExists(t)&&(this.current_route.set(this.routes.find((function(e){return e.path===t}))),!0)},t}());r(window).on({popstate:function(t){l.setRoute(window.location.pathname)}}),r(document).on({DOMContentLoaded:function(t){l.setRoute(window.location.pathname)},click:function(t){t.target instanceof HTMLAnchorElement&&(t.preventDefault(),l.routeTo(t.target.href))}});var a,p=(a=function(t,e){return a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},a(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}a(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),d=new(function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.test="Hello World",e}return p(e,t),e.prototype.init=function(){var t=this;setTimeout((function(){t.test="Something else"}),1e3)},e.prototype.testf=function(){console.log("test")},e.prototype.template=function(){return"\n            ".concat(l.current_route.get().render(),"\n        ")},e}(c)),f=function(){function t(){}return t.createNode=function(t,e){var n=t?(new DOMParser).parseFromString(t,"text/html").children[0].children[1]:e;if(!n)return[];if(n.children.length<1)return[u=new s(r(n).text())];for(var o=[],i=0;i<n.children.length;i++){for(var c=n.children[i],u=new h(c.tagName,{}),l=0;l<c.attributes.length;l++)u.props[c.attributes[l].nodeName]=c.attributes[l].nodeValue||"";u.children=u.children.concat(this.createNode(void 0,c)),o.push(u)}return o},t.prototype.renderLoop=function(t){var e=this;d.render().forEach((function(e){e.update(t)})),requestIdleCallback((function(){return e.renderLoop(t)}))},t}();(new f).renderLoop(document.body)},2868:()=>{},4777:()=>{},9830:()=>{},209:()=>{},7414:()=>{}},t=>{t.O(0,[216],(()=>(7661,t(t.s=7661)))),t.O()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,